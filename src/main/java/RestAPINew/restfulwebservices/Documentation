Get - Retrieves the details of a resource

POST - Creates a new resource

PUT- Updates the details of an existing resource

PATCH - Update part of a resource

DELETE -  Delete  a resource


--------------------------------------------------------------------------

Social Media Application - resources and Methods

Users REST API
-GET/users

Create a User
-POST/users

Retrieve one User
-GET/Users/{id}->/Users/1 (here we are using a path variable)

DELETE a User
-DELETE/users/{id}->/users/1

Posts(Social media post) REST PI
Retrieve  all posts for a User
-GET/users/{id}/posts

Create a post for a user
-POST/users/{id}/posts

Retrieve details of a post
-GET/users/{id}/posts/{post_id}



All the variables that are declared in User.java and upon creating Constructors, setters and getters ,toString() -> this whole thing is called a "JAVA BEAN".
Now we can build a RESTAPI around the above created User Bean.

To play with data stored in a database we need to create a DAO object(Data Access Object).

------------------------------------------------------------------------------------------------------

Users Rest API

-Retrieve all users
--GET/users

Create a User
--POST/users



-------------------------------------
Response status for REST API

404->Resource not found
500->sever exception
400->validation error

IMPORTANT RESPONSE STATUSES

200->Success
201->Created
204->no-content
401->Unauthorized(When authorization fails)
404->resource not found
500->server exception
----------------------------------------------------------------------------------

Versioning  REST API
Variety of options:

URI-Twitter

Request Parameter-Amazon

Header-(CUSTOM ) headers versioning -Microsoft
SAME-URL header =[X-API-VERSION=1]

Media Type- GitHub(Content negotiation or accept header)
SAME-URL produces = application/vnd.company.app-v1+json
SAME-URL produces = application/vnd.company.app-v2+json

-----------------------------------
Versioning REST API -Factors
Factors to consider
-URI Pollution
-Misuse of HTTP headers
-Caching
-can we execute the request on the browser
-API Documentation
Summary:No perfect solution
Recommendations
-Think about versioning before you need it
One Enterprise -One versioning approach
---------------------------------------------------------
HATEOAS -HYPERMEDIA AS THE ENGINE OF APPLICATION STATE



REST API Serialization :  Convert object to stream (Eg : JSON)
Most Popular REST API serialization in java is Jackson.

-----------------------------------------------------------------------------

Spring security -> iT intercepts the requests and there will be number of filter chains
1) All requests should be authenticated
2)If a request is not authenticated, a web page is down
3)CSRF->POST,PUT

->creating a Spring
Configuration file


Bean FilterChain
------------------------------------------------------------------

docker run --detach
--env MYSQL_ROOT_PASSWORD=dummypassword
--env MYSQL_USER=social-media-user
--env MYSQL_PASSWORD=dummypassword
--env MYSQL_DATABASE=social-media-database
--name mysql
--publish 3306:3306
mysql:8-oracle



mysqlsh commands
mysqlsh
\connect social-media-user@localhost:3306
\sql
use social-media-database
select * from user_details;
select * from post;
\quit


dependency in pom.xml
  <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
    </dependency>
--------------------------------------------------------------------------------